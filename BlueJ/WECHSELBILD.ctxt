#BlueJ class context
comment0.target=WECHSELBILD
comment0.text=\r\n\ Klasse\ WECHSELBILD\ kann\ mehrere\ Bilder\ verwalten\ von\ denen\ immer\ nur\ eines\ angezeigt\ wird.\r\n\ \r\n\ @author\ \ \ \ \ \ mike\ ganshorn\ editiert\ von\ Tim\ K\u00F6hler\r\n\ @version\ \ \ \ \ v1.1\ (2017-04-11)\r\n\ \r\n\ @changelog\ \ \ 1.1\ verschiebenUm\ greift\ nun\ konsequent\ auf\ bewegen\ zurueck\r\n\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ sichtbar(int)\ hinzugefuegt\r\n\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ Methoden\ in\ allen\ Klassen\ vereinheitlicht\ (bis\ auf\ indiv.\ Methoden)\r\n\ \r\n\ \ \ \ \ \ \ \ \ \ \ \ \ \ 1.0\ Grundlegende\ Implementierung\r\n\ \r\n\ \ \ \ \ \ \ \ \ \ \ \ \ \ \r\n
comment1.params=x\ y\ verzeichnis
comment1.target=WECHSELBILD(int,\ int,\ java.lang.String)
comment1.text=\r\n\ Konstruktor\ der\ Klasse\ WECHSELBILD.\r\n\ \r\n\ @param\ \ \ x\ \ \ \ \ \ \ \ \ \ \ x-Koordinate\ des\ Mittelpunkts\r\n\ \r\n\ @param\ \ \ y\ \ \ \ \ \ \ \ \ \ \ y-Koordinate\ des\ Mittelpunkts\r\n\ \r\n\ @param\ \ \ String...\ \ \ Ein\ oder\ mehrere\ Dateinamen\ durch\ Kommata\ getrennt\r\n
comment10.params=
comment10.target=int\ nenneMx()
comment10.text=\r\n\ Nennt\ die\ x-Koordinate\ (in\ Pixel)\ des\ Mittelpunkts\ dieses\ Objekts.\ \r\n\r\n\ @return\ \ x-Koordinate\ des\ Mittelpunkts\ (Pixel)\r\n
comment11.params=
comment11.target=int\ nenneMy()
comment11.text=\r\n\ Nennt\ die\ y-Koordinate\ (in\ Pixel)\ des\ Mittelpunkts\ dieses\ Objekts.\ \r\n\r\n\ @return\ \ y-Koordinate\ des\ Mittelpunkts\ (Pixel)\r\n
comment12.params=sichtbarNeu
comment12.target=void\ setzeSichtbar(boolean)
comment12.text=\r\n\ Macht\ das\ Objekt\ sichtbar\ /\ unsichtbar.\ \r\n\r\n\ @param\ \ \ sichtbarNeu\ \ \ \ \ true,\ wenn\ die\ Grafik\ sichtbar\ sein\ soll,\ sonst\ false\r\n
comment13.params=
comment13.target=boolean\ nenneSichtbar()
comment13.text=\r\n\ Prueft,\ od\ dieses\ Objekt\ gerade\ sichtbar\ ist.\ \r\n\r\n\ @return\ \ true,\ wenn\ die\ Grafik\ gerade\ sichbar\ ist,\ sonst\ false\r\n
comment14.params=winkelAenderung
comment14.target=void\ drehenUm(float)
comment14.text=\r\n\ Dreht\ die\ Grafik\ um\ den\ angegebenen\ Winkel.\ \r\n\r\n\ @param\ \ \ winkelAenderung\ \ \ \ \ +\:\ mathematisch\ positiver\ Drehsinn\ (gegen\ den\ Uhrzeigersinn)\r\n\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ -\:\ mathematisch\ negativer\ Drehsinn\ (im\ Uhrzeigersinn)\r\n
comment15.params=neuerDrehwinkel
comment15.target=void\ setzeDrehwinkel(float)
comment15.text=\r\n\ Setzt\ den\ Drehwinkel\ auf\ einen\ absoluten\ neuen\ Wert.\ \r\n\ Die\ Orientierung\ unmittelbar\ nach\ dem\ Erzeugen\ des\ Objekts\ entspricht\ Winkel\ 0.\r\n\r\n\ @param\ \ \ neuerDrehwinkel\ \ \ \ \ der\ neue\ Drehwinkel\r\n\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ +\:\ mathematisch\ positiver\ Drehsinn\ (gegen\ den\ Uhrzeigersinn)\r\n\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ -\:\ mathematisch\ negativer\ Drehsinn\ (im\ Uhrzeigersinn)\r\n
comment16.params=
comment16.target=float\ nenneWinkel()
comment16.text=\r\n\ Nennt\ den\ Winkel,\ um\ den\ die\ Grafik\ gegenueber\ ihrer\ Erzeugung\ gedreht\ wurde.\ \r\n\r\n\ @return\ \ \ \ \ \ der\ Winkel,\ um\ den\ die\ Grafik\ gedreht\ wurde\r\n\ \ \ \ \ \ \ \ \ \ \ \ \ \ 0\:\ wenn\ nicht\ gedreht\r\n\ \ \ \ \ \ \ \ \ \ \ \ \ \ +\:\ wenn\ mathematisch\ positiver\ Drehsinn\ (gegen\ den\ Uhrzeigersinn)\r\n\ \ \ \ \ \ \ \ \ \ \ \ \ \ -\:\ wenn\ mathematisch\ negativer\ Drehsinn\ (im\ Uhrzeigersinn)\r\n
comment17.params=
comment17.target=float\ sin_Drehwinkel()
comment17.text=\r\n\ Liefert\ den\ Sinus\ des\ aktuellen\ Drehwinkels\ der\ Grafik.\ \r\n\r\n\ @return\ \ Sinus\ des\ aktuellen\ Drehwinkels\r\n
comment18.params=
comment18.target=float\ cos_Drehwinkel()
comment18.text=\r\n\ Liefert\ den\ Cosinus\ des\ aktuellen\ Drehwinkels\ der\ Grafik.\ \r\n\r\n\ @return\ \ Cosinus\ des\ aktuellen\ Drehwinkels\r\n
comment19.params=grafikObjekt
comment19.target=int\ berechneAbstandX(ea.Raum)
comment19.text=\r\n\ Diese\ Methode\ prueft,\ wie\ weit\ der\ Mittelpunkt\ dieses\ Objekts\ vom\ Mittelpunkt\ \r\n\ eines\ anderen\ Grafik-Objekts\ in\ x-Richtung\ entfernt\ ist.\r\n\ \r\n\ @param\ \ \ grafikObjekt\ \ \ \ Das\ andere\ Grafik-Objekt\r\n\ \r\n\ @return\ \ Abstand\ (in\ Pixeln)\ dieses\ Rechtecks\ vom\ anderen\ Grafik-Objekt\ in\ x-Richtung\ \r\n\ \ \ \ \ \ \ \ \ \ (>0,\ wenn\ dieses\ Rechteck\ rechts\ des\ anderen\ Grafik-Objekts\ liegt)\r\n
comment2.params=aktiv
comment2.target=void\ setSchield(boolean)
comment20.params=grafikObjekt
comment20.target=int\ berechneAbstandY(ea.Raum)
comment20.text=\r\n\ Diese\ Methode\ prueft,\ wie\ weit\ der\ Mittelpunkt\ dieses\ Objekts\ vom\ Mittelpunkt\ \r\n\ eines\ anderen\ Grafik-Objekts\ in\ y-Richtung\ entfernt\ ist.\r\n\ \r\n\ @param\ \ \ grafikObjekt\ \ \ \ Das\ andere\ Grafik-Objekt\r\n\ \r\n\ @return\ \ Abstand\ (in\ Pixeln)\ dieses\ Kreises\ vom\ anderen\ Grafik-Objekt\ in\ y-Richtung\ \r\n\ \ \ \ \ \ \ \ \ \ (>0,\ wenn\ dieser\ Kreis\ unterhalb\ des\ anderen\ Grafik-Objekts\ liegt)\r\n
comment3.params=
comment3.target=void\ wechseln()
comment3.text=\r\n\ Macht\ das\ aktuelle\ Bild\ unsichtbar\ und\ das\ naechste\ Bild\ sichtbar.\ \r\n\ Am\ Ende\ der\ Bilder\ wird\ wieder\ von\ Vorne\ bekonnen.\r\n\r\n
comment4.params=bildNr
comment4.target=void\ wechseln(int)
comment4.text=\r\n\ Macht\ das\ aktuelle\ Bild\ unsichtbar\ und\ das\ genannte\ Bild\ sichtbar.\ \r\n\ Sollte\ die\ gewahlte\ Bildnummer\ zu\ gross\ sein,\ wird\ ein\ anderes\ Bild\ sichtbar\ gemacht.\r\n\r\n\ @param\ \ \ bildNr\ \ Die\ Nummer\ des\ Bildes,\ das\ sichtbar\ gemacht\ werden\ soll\r\n
comment5.params=
comment5.target=int\ nenneBildNummer()
comment5.text=\r\n\ Nennt\ die\ Nummer\ des\ aktuellen\ Bilds\ (beginnend\ mit\ 0)\r\n\r\n\ @return\ \ \ \ \ \ Die\ Nummer\ des\ aktuellen\ Bilds\ (beginnend\ mit\ 0)\r\n
comment6.params=deltaX\ deltaY
comment6.target=void\ verschiebenUm(float,\ float)
comment6.text=\r\n\ Verschiebt\ das\ Objekt\ um\ die\ angegebenen\ Pixel.\ \r\n\r\n\ @param\ \ \ deltaX\ \ Pixel\ in\ x-Richtung\ (wird\ bei\ Bedarf\ auf\ ganze\ Pixel\ gerundet)\r\n\ \r\n\ @param\ \ \ deltaY\ \ Pixel\ in\ y-Richtung\ (wird\ bei\ Bedarf\ auf\ ganze\ Pixel\ gerundet)\r\n
comment7.params=r
comment7.target=boolean\ beruehrt(ea.Raum)
comment7.text=\r\n\ Prueft,\ ob\ ein\ anderes\ Grafik-Objekt\ beruehrt\ wird.\ \r\n\r\n\ @param\ \ \ r\ \ \ Ein\ anderes\ BILD,\ RECHTECK,\ KREIS,\ DREIECK,\ ...\r\n\ \r\n\ @return\ \ true,\ wenn\ sich\ die\ beiden\ Objekte\ ueberschneiden\r\n
comment8.params=x\ y
comment8.target=boolean\ beinhaltetPunkt(int,\ int)
comment8.text=\r\n\ Prueft,\ ob\ das\ Objekt\ einen\ bestimmten\ Punkt\ (in\ Pixel-Koordinaten)\ beinhaltet.\ \r\n\r\n\ @param\ \ \ x\ \ \ x-Koordinate\ des\ Punkts\ (Pixel)\r\n\ \r\n\ @param\ \ \ y\ \ \ x-Koordinate\ des\ Punkts\ (Pixel)\r\n\ \r\n\ @return\ \ \ \ \ \ true,\ wenn\ Punkt\ innerhalb\ der\ Grafik\r\n
comment9.params=x\ y
comment9.target=void\ setzeMittelpunkt(int,\ int)
comment9.text=\r\n\ Setzt\ den\ Mittelpunkt\ des\ Objekts\ auf\ einen\ (in\ Pixel-Koordinaten)\ anzugebenden\ Punkt.\ \r\n\r\n\ @param\ \ \ x\ \ \ x-Koordinate\ des\ Mittelpunkts\ (Pixel)\r\n\ \r\n\ @param\ \ \ y\ \ \ y-Koordinate\ des\ Mittelpunkts\ (Pixel)\r\n
numComments=21
